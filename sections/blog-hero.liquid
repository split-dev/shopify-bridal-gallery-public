{{ 'blog-hero.out.css' | asset_url | stylesheet_tag }}

{%- liquid
    assign imageWidth = section.settings.image.width
    assign imageHeight = imageWidth | divided_by: section.settings.image.aspect_ratio
    if section.settings.image_lazy
        assign imageLoading = 'lazy'
    else
        assign imageLoading = ''
    endif
-%}

{%- style -%}
    .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top_mb }}px;
    padding-bottom: {{ section.settings.padding_bottom_mb }}px;
    }

    @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    }
{%- endstyle -%}

<section class="blog-hero section-{{ section.id }}-padding">

    {%- if section.settings.image != blank -%}
        <picture class="{% if section.settings.image_overlay %}blog-hero__overlay{% endif %}">
            {%- if section.settings.image_mobile != blank -%}
                <source
                        media="(max-width: 750px)"
                        srcset="
            {%- if section.settings.image_mobile.width >= 375 -%}{{ section.settings.image_mobile | image_url: width: 375 }} 375w,{%- endif -%}
            {%- if section.settings.image_mobile.width >= 550 -%}{{ section.settings.image_mobile | image_url: width: 550 }} 550w,{%- endif -%}
            {%- if section.settings.image_mobile.width >= 750 -%}{{ section.settings.image_mobile | image_url: width: 750 }} 750w,{%- endif -%}
          ">
            {%- endif -%}

            {% if section.settings.image != blank %}
                {{ section.settings.image | image_url: width: 3840 | image_tag:
                loading: imageLoading,
                width: imageWidth,
                height: imageHeight,
                class: 'blog-hero__image',
                sizes: '100vw',
                widths: '375, 550, 750, 1100, 1500, 1780, 2000, 3000, 3840' }}
            {% endif %}
        </picture>
    {%- else -%}
        {{ 'lifestyle-2' | placeholder_svg_tag: 'placeholder-svg' }}
    {%- endif -%}
    <div class="page-width blog-hero__wrapper">
        <div class="blog-hero__content">
            {% if section.settings.enable_breadcrumbs %}
              {% render 'breadcrumbs' %}
            {% endif %}
                <h1 class="text-white h2">
                    {{ section.settings.header }}
                </h1>
                <p class="blog-hero__text text-white text-15px">{{ section.settings.paragraph }}</p>
            {% if section.settings.button_label %}
                <span class="btn btn__ternary" id="shareWeddingButton">{{ section.settings.button_label }}</span>
            {% endif %}

        </div>
    </div>
</section>

<div id="shareWeddingModal" class="modal">
  <div class="blog-hero__modal position-relative d-flex justify-content-center align-items-center modal-content">
    <span id="shareWeddingClose" class="close d-flex align-items-center">
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M5.33366 15.8333L4.16699 14.6667L8.83366 9.99999L4.16699 5.33332L5.33366 4.16666L10.0003 8.83332L14.667 4.16666L15.8337 5.33332L11.167 9.99999L15.8337 14.6667L14.667 15.8333L10.0003 11.1667L5.33366 15.8333Z" fill="black"/>
        </svg>
    </span>
    <div class="blog-hero__modal-wrapper">
      <h3 class="text-text text-center">{{section.settings.form_title}}</h3>
      <p class="text-text text-15px text-center">{{section.settings.form_subtitle}}</p>
      <form class="custom-form" action="">
        <div class="custom-form__row">
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormName">NAME</label>
            <input
              class="custom-form__input text-text text-15px"
              type="text"
              id="FormName"
              name="share_wedding[first_name]"
              aria-required="true"
              placeholder="First & Last Name"
              {% if user.name %}
                value="{{ user.name }}"
              {% endif %}
              required
            >
          </div>
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormSoulmateName">Soulmate's NAME</label>
            <input
              class="custom-form__input text-text text-15px"
              type="text"
              id="FormSoulmateName"
              name="share_wedding[soulmate_name]"
              aria-required="true"
              placeholder="Your Soulmate’s Name"
              required
            >
          </div>
        </div>
        <div class="custom-form__row">
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormEmail">Your Email</label>
            <input
              type="email"
              id="FormEmail"
              class="custom-form__input text-text text-15px"
              name="share_wedding[email]"
              value="{% if form.email %}{{ form.email }}{% elsif customer %}{{ customer.email }}{% endif %}"
              aria-required="true"
              placeholder="example@mail.com"
              required
            >
          </div>
        </div>
        <div class="custom-form__row custom-form__column-position">
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormLink">Wedding Date</label>
            <div class="select-date-js d-flex">
              <div class="custom-form__select custom-form__select-wedding">
                <select id="day">
                  <option value="" style="display:none;" disabled selected>Day</option>
                </select>
              </div>
              <div class="custom-form__select custom-form__select-wedding">
                <select id="month" onchange="updateDays()">
                  <option value="" style="display:none;" disabled selected>Month</option>
                  {% assign months = "January, February, March, April, May, June, July, August, September, October, November, December" | split: ", " %}
                  {% for month in months %}
                    <option value="{{ forloop.index }}">{{ month }}</option>
                  {% endfor %}
                </select>
              </div>
              <div class="custom-form__select custom-form__select-wedding">
                <select id="year" onchange="updateDays()">
                  <option value="" style="display:none;" disabled selected>Year</option>
                  {% assign current_year = "now" | date: "%Y" | plus: 0 %}
                  {% for year in (1980..current_year) %}
                    <option value="{{ year }}">{{ year }}</option>
                  {% endfor %}
                </select>
              </div>

            </div>

          </div>
          <div class="custom-form__field position-relative custom-form__location">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormLocation">Wedding Venue</label>
            <input
              class="custom-form__input text-text text-15px"
              type="text"
              id="FormLocation"
              name="share_wedding[location]"
              placeholder="Location"
            >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M8.00065 0C6.23314 0.00194106 4.53857 0.704943 3.28875 1.95477C2.03893 3.20459 1.33593 4.89915 1.33398 6.66667C1.33398 10.188 6.93398 15.022 7.56998 15.562L8.00065 15.926L8.43132 15.562C9.06732 15.022 14.6673 10.188 14.6673 6.66667C14.6654 4.89915 13.9624 3.20459 12.7126 1.95477C11.4627 0.704943 9.76817 0.00194106 8.00065 0ZM8.00065 10C7.34138 10 6.69691 9.8045 6.14875 9.43823C5.60059 9.07196 5.17334 8.55136 4.92105 7.94228C4.66876 7.33319 4.60275 6.66297 4.73137 6.01637C4.85998 5.36976 5.17745 4.77582 5.64363 4.30964C6.1098 3.84347 6.70375 3.526 7.35035 3.39738C7.99695 3.26877 8.66718 3.33478 9.27626 3.58707C9.88535 3.83936 10.4059 4.2666 10.7722 4.81477C11.1385 5.36293 11.334 6.0074 11.334 6.66667C11.3329 7.5504 10.9814 8.39763 10.3565 9.02252C9.73161 9.64741 8.88438 9.99894 8.00065 10Z" fill="#455869"/>
              <path d="M8 8.66667C9.10457 8.66667 10 7.77124 10 6.66667C10 5.5621 9.10457 4.66667 8 4.66667C6.89543 4.66667 6 5.5621 6 6.66667C6 7.77124 6.89543 8.66667 8 8.66667Z" fill="#455869"/>
            </svg>
          </div>

        </div>
        <div class="custom-form__row">
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormLink">Link To Photo Gallery</label>
            <input
              class="custom-form__input text-text text-15px"
              type="text"
              id="FormLink"
              name="share_wedding[link]"
              placeholder="https://www..."
            >
          </div>
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormPassword">Gallery Password/Download Code</label>
            <input
              class="custom-form__input text-text text-15px"
              type="text"
              id="FormPassword"
              name="share_wedding[password]"
              placeholder="Password"
            >
          </div>
        </div>
        <div class="custom-form__row d-block">
          <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormLink">Photographs</label>
          <p class="text-dark-grey p-small mb-4 d-block">Upload your favorite photos of the day (max images: 6 photos)</p>
          <div class="custom-form__images d-flex">
            <div id="drop-area" class="d-flex align-items-center justify-content-center">
              <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
              <label class="d-flex flex-column align-items-center p-small" for="fileElem">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="14" viewBox="0 0 16 14" fill="none">
                  <path opacity="0.6" d="M12.232 3.48667C11.358 1.386 9.302 0 7 0C3.87533 0 1.33333 2.542 1.33333 5.66667C1.33333 6.034 1.36867 6.398 1.438 6.75533C0.54 7.44333 0 8.51933 0 9.66667C0 11.688 1.49533 13.3333 3.33333 13.3333H11C13.7573 13.3333 16 11.0907 16 8.33333C16 6.022 14.4373 4.04267 12.232 3.48667ZM10.1953 8.19467L8.66667 6.666V10.666H7.33333V6.666L5.80467 8.19467L4.862 7.252L7.05733 5.05667C7.57667 4.53733 8.42333 4.53733 8.94267 5.05667L11.138 7.252L10.1953 8.19467Z" fill="#455869"/>
                </svg>
                Upload
              </label>
            </div>
            <div id="gallery" class="d-flex flex-wrap"></div>
          </div>
        </div>
        <div class="custom-form__row-full">
          <div class="custom-form__field">
            <label class="custom-form__label title-small-upper text-text mb-3 d-block" for="FormTextarea">Tell Us About Your Wedding!</label>
            <textarea
              id="FormTextarea"
              class="custom-form__textarea text-text text-15px"
              name="share_wedding[textarea]"
              id="FormTextarea"
              placeholder="Theme, unique aspects, venue, bridesmaids, bridal consultant, wedding dress"
              ></textarea>
          </div>
        </div>
        <div class="check_terms">
          <input
            type="checkbox"
            id="checkTerms"
            name="checkTerms" />
          <label class="p-small" for="checkTerms">{{section.settings.check_terms}}</label>
        </div>
        <div class="custom-form__button d-flex justify-content-center">
          <button type="submit" id="custom-form__submit" class="btn btn__primary" disabled>Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Get the modal
  var weddingmodal = document.getElementById("shareWeddingModal");

  // Get the button that opens the modal
  var weddingbtn = document.getElementById("shareWeddingButton");

  // Get the <span> element that closes the modal
  var weddingspan = document.getElementById("shareWeddingClose");

  // When the user clicks on the button, open the modal
  weddingbtn.onclick = function() {
    weddingmodal.style.display = "block";

  }

  // When the user clicks on <span> (x), close the modal
  weddingspan.onclick = function() {
    weddingmodal.style.display = "none";
  }

  // When the user clicks anywhere outside of the modal, close it
  window.addEventListener('click', (event) => {
    if (event.target == weddingmodal) {
      weddingmodal.style.display = "none";
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    NiceSelect.bind(document.getElementById("month"));
    var instanse = NiceSelect.bind(document.getElementById("day"));
    NiceSelect.bind(document.getElementById("year"));

    // Сохраняем instanse на уровне обработчика DOMContentLoaded
    window.instanse = instanse;
  });

function updateDays() {
    var month = document.getElementById("month").value;
    var year = document.getElementById("year").value;
    var daySelect = document.getElementById("day");

    // Clear the day selection dropdown
    daySelect.innerHTML = "";

    // Get the number of days in the selected month and year
    var daysInMonth = new Date(year, month, 0).getDate();

    // Add the days to the day selection dropdown
    for (var i = 1; i <= daysInMonth; i++) {
        var option = document.createElement("option");
        option.text = i;
        daySelect.add(option);
    }

    // Теперь мы можем обратиться к instanse на уровне функции updateDays
    window.instanse.update();

}

  function populateDays() {
    var daySelect = document.getElementById("day");

    // Add the days from 1 to 31 to the day selection dropdown
    for (var i = 1; i <= 31; i++) {
      var option = document.createElement("option");
      option.text = i;
      daySelect.add(option);
    }

  }

  //function updateDateInput() {
  //    var year = document.getElementById("year").value;
  //    var month = document.getElementById("month").value;
  //    var day = document.getElementById("day").value;

  //    var dateInput = document.getElementById("RegisterForm-birth-date");
  //    dateInput.value = year + "-" + month.padStart(2, "0") + "-" + day.padStart(2, "0");

  //    console.log(dateInput.value);
  //  }

  populateDays()


  document.querySelectorAll('.select-date-js select').forEach((inp)=> {
    inp.addEventListener('change', function() {
    //  updateDateInput();

    })
  })

</script>

<script>
  const checkoutButton = document.getElementById('custom-form__submit');
  const inputNameEl = document.getElementById("FormName");
  const inputSoulmatesNameEl = document.getElementById("FormSoulmateName");
  const inputEmailEl = document.getElementById("FormEmail");
  const inputLocationEl = document.getElementById("FormLocation");
  const inputLinkEl = document.getElementById("FormLink");
  const inputPasswordEl = document.getElementById("FormPassword");
  const inputTextEl = document.getElementById("FormTextarea");
  let dropArea = document.getElementById('drop-area');

  let imageFiles = [];
  let day = "00";
  let month = "00";
  let year = "0000";

  const shareRequestBody = {
    "name": inputNameEl.value ? inputNameEl.value : "",
    "wife_name": "",
    "email": inputEmailEl.value ? inputEmailEl.value : "",
    "wedding_date": "",
    "wedding_venue": "",
    "link_gallery": "",
    "gallery_password": "",
    "imgs": [],
    "about_wedding": ""
  };

  let dayOptionElems;
  let monthOptionElems;
  let yearOptionElems;
  let dateElems;

  setTimeout(() => {
    dayOptionElems = document.querySelectorAll("[data-type='Day'] .option.null");
    monthOptionElems = document.querySelectorAll("[data-type='Month'] .option.null");
    yearOptionElems = document.querySelectorAll("[data-type='Year'] .option.null");
    dateElems = document.querySelectorAll(".custom-form__select.custom-form__select-wedding");

    function setDateParam(elemsArr, param){
      [...elemsArr].forEach(elem => {
        elem.addEventListener("click", event => {
          if(param === "day"){
            day = event.target.dataset.value;
          }
          if(param === "month"){
            month = event.target.dataset.value;
          }
          if(param === "year"){
            year = event.target.dataset.value;
          }
        })
      });
    }

    setDateParam(dayOptionElems, "day");
    setDateParam(monthOptionElems, "month");
    setDateParam(yearOptionElems, "year");
  }, 1500);

  function nonValidEl(elem){
    elem.style.outline = '1px solid red';
  };

  function validEl(elem) {
    elem.style.outline = '1px solid green';
  };

  function setReqBodyValue(event, param){
    shareRequestBody[param] = event.target.value;
  };

  inputNameEl.addEventListener("input", event => {
    setReqBodyValue(event, "name");
  });

  inputSoulmatesNameEl.addEventListener("input", event => {
    setReqBodyValue(event, "wife_name");
  });

  inputEmailEl.addEventListener("input", event => {
    setReqBodyValue(event, "email");
  });

  inputLocationEl.addEventListener("input", event => {
    setReqBodyValue(event, "wedding_venue");
  });

  inputLinkEl.addEventListener("input", event => {
    setReqBodyValue(event, "link_gallery");
  });

  inputPasswordEl.addEventListener("input", event => {
    setReqBodyValue(event, "gallery_password");
  });

  inputTextEl.addEventListener("input", event => {
    setReqBodyValue(event, "about_wedding");
  });

  async function postShareData(){
    const responce = await fetch('https://be.thebridalgallery.com/api/v1/wedding/share', {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(shareRequestBody),
    })
    .then(res => res.json())
    .then(res => {
      console.log("postShareData >>", res)
      checkoutButton.textContent = "Success!"
      checkoutButton.style.outline = "1px solid green"
      setTimeout(() => {
        document.getElementById("shareWeddingModal").style.display = "none";
      }, 1000)
    })
    .catch(error => {
      console.log("postShareData error >>", error.message)
      checkoutButton.textContent = `${error.message}`
      checkoutButton.style.outline = "1px solid red"
    });
  };

  document.getElementById('checkTerms').addEventListener('click', e => {
    if (e.target.checked) {
      checkoutButton.removeAttribute('disabled');
    } else {
      checkoutButton.setAttribute("disabled", '');
    }
  });

  checkoutButton.addEventListener("click", event => {
    event.preventDefault();

    shareRequestBody.wedding_date = `${year}-${month.padStart(2, "0")}-${day.padStart(2, "0")}`;

    if(shareRequestBody.name !== ""
      && shareRequestBody.wife_name !== ""
      && shareRequestBody.email !== ""
      && shareRequestBody.wedding_venue !== ""
      && day !== "00"
      && month !== "00"
      && year !== "0000"
      && (imageFiles !== [] || link_gallery !== "")
    ){
      [...imageFiles].forEach(uploadFile);
      setTimeout(postShareData(), 2000);
    } else {
      shareRequestBody.name === "" ? nonValidEl(inputNameEl) : validEl(inputNameEl);

      shareRequestBody.wife_name === "" ? nonValidEl(inputSoulmatesNameEl) : validEl(inputSoulmatesNameEl);

      shareRequestBody.email === "" ? nonValidEl(inputEmailEl) : validEl(inputEmailEl);

      shareRequestBody.wedding_venue === "" ? nonValidEl(inputLocationEl) : validEl(inputLocationEl);

      shareRequestBody.about_wedding === "" ? nonValidEl(inputTextEl) : validEl(inputTextEl);

      [...dateElems].forEach((elem, idx) => {
        if (idx === 0 ) {
          day === "00"
            ? elem.style.outline = '1px solid red'
            : elem.style.outline = '1px solid green';
        }
        if (idx === 1 ) {
          month === "00"
            ? elem.style.outline = '1px solid red'
            : elem.style.outline = '1px solid green';
        }
        if (idx === 2 ) {
          year === "0000"
            ? elem.style.outline = '1px solid red'
            : elem.style.outline = '1px solid green';
        }
      })
    }
  });

  let uploadedImages = 0;


  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false)
  })

  function preventDefaults(e) {
      e.preventDefault()
      e.stopPropagation()
  }

  ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false)
  });

  ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false)
  })

  function highlight(e) {
      dropArea.classList.add('highlight')
  }

  function unhighlight(e) {
      dropArea.classList.remove('highlight')
  }

  dropArea.addEventListener('drop', handleDrop, false)

  function handleDrop(e) {
      let dt = e.dataTransfer
      let files = dt.files

      handleFiles(files)
  }

  function handleFiles(files) {
      imageFiles = [...imageFiles, ...files];

      if(imageFiles.length > 6){
        imageFiles = imageFiles.slice(0, 6);
      }

      files = [...files];
      files.forEach(previewFile);
  }

  async function uploadFile(file) {
      let url = 'https://be.thebridalgallery.com/api/v1/files'
      let formData = new FormData()

      formData.append('file', file)

      const responce = await fetch(url, {
          method: 'POST',
          body: formData
      })
      .then(res => res.json())
      .then(res => {
        shareRequestBody.imgs.push({url: res.data.url});
      })
      .catch((error) => { console.log('uploadFile error', error.message) });
  }

  function previewFile(file) {
      let reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = function () {
          if (uploadedImages < 6) { // Проверяем лимит загрузки
              let imgContainer = document.createElement('div');
              imgContainer.classList.add('image-container');

              let img = document.createElement('img');
              img.src = reader.result;

              // Добавляем обработчик события клика к изображению
              img.addEventListener('click', () => deleteImage(imgContainer, file.name));

              imgContainer.appendChild(img);
              imgContainer.setAttribute("data-name", file.name);

              document.getElementById('gallery').appendChild(imgContainer);

              uploadedImages++; // Увеличиваем счетчик загруженных изображений
          } else {
              // Показываем сообщение о достигнутом лимите
              showLimitReachedMessage();
          }
      };
  }

  function deleteImage(container, name) {
      container.remove();
      imageFiles = imageFiles.filter(item => item.name !== name);
      uploadedImages--; // Уменьшаем счетчик загруженных изображений
      hideLimitReachedMessage(); // Скрываем сообщение о достигнутом лимите (если есть)
  }

  function showLimitReachedMessage() {
      let limitMessage = document.createElement('div');
      limitMessage.textContent = 'Maximum number of images reached (6 out of 6)';
      limitMessage.classList.add('limit-message');

      document.getElementById('gallery').appendChild(limitMessage);

      // Через некоторое время скрываем сообщение
      setTimeout(() => {
          limitMessage.remove();
      }, 50000);
  }

  function hideLimitReachedMessage() {
      let limitMessage = document.querySelector('.limit-message');
      if (limitMessage) {
          limitMessage.remove();
      }
  }
</script>

{% schema %}
{
  "name": "Blog Hero Banner",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Desktop Image"
    },
    {
      "type": "image_picker",
      "id": "image_mobile",
      "label": "Mobile Image"
    },
    {
      "type": "checkbox",
      "id": "image_lazy",
      "label": "Image lazy loading",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "image_overlay",
      "label": "Image overlay",
      "default": true
    },
    {
      "type": "paragraph",
      "content": "If the section follows first on the page lazy loading should not be enabled. This will cause the FCP (First Contentful Paint) to deteriorate"
    },
    {
      "type": "text",
      "id": "header",
      "label": "Section header",
      "default": "Our Real Brides"
    },
    {
      "type": "text",
      "id": "paragraph",
      "label": "Paragraph",
      "default": "Experience the true magic of wedding day moments as you browse through our collection of real weddings."
    },
    {
      "type": "url",
      "id": "button_url",
      "label": "URL Button"
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Label Button"
    },
    {
      "type": "header",
      "content": "Breadcrumbs"
    },
    {
      "type": "checkbox",
      "id": "enable_breadcrumbs",
      "label": "Enable Breadcrumbs",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "breadcrumbs_white",
      "label": "Breadcrumbs color white",
      "default": true
    },
    {
      "type": "header",
      "content": "Share Wedding Form"
    },
    {
      "type": "text",
      "id": "form_title",
      "label": "Form Title",
      "default": "Share My Wedding"
    },
    {
      "type": "text",
      "id": "form_subtitle",
      "label": "Form Subtitle",
      "default": "Don't skimp on the details! We love to share well captioned wedding stories with our TBG Bride community"
    },
    {
      "type": "richtext",
      "id": "check_terms",
      "label": "Checkbox Label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px",
      "label": "Padding top desktop",
      "default": 80
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom desktop",
      "default": 148
    },
    {
      "type": "range",
      "id": "padding_top_mb",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "Padding top mobile",
      "default": 80
    },
    {
      "type": "range",
      "id": "padding_bottom_mb",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom mobile",
      "default": 80
    }
  ],
  "presets": [
    {
      "name": "Blog Hero Banner",
      "category": "Custom"
    }
  ]
}
{% endschema %}